type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class GameOfLifeTest extends StageTest<String> {

        int[] sizes = {5, 6, 7, 8, 9, 10};

        @DynamicTest(data = "sizes")
        CheckResult test(int size) {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute(String.valueOf(size));

            if (output.isEmpty()) {
                return CheckResult.wrong("Looks like your output is empty!");
            }

            if (!output.toLowerCase().contains("generation")) {
                return CheckResult.wrong("Can't find 'Generation' word in the output!");
            }

            String[] generations = output.toLowerCase().split("generation");

            if (generations.length < 11) {
                return CheckResult.wrong("Your output should contain not less than 10 generations!");
            }

            List<Generation> generationsList = Generation.getGenerations(generations, size);

            Generation.isCorrectGenerationsList(generationsList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/Generation.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class Generation {

        private static final Pattern pattern = Pattern.compile("alive:(\\s+)?(\\d+)", Pattern.MULTILINE);
        private final boolean[][] cells;
        private final int size;


        public Generation(List<String> lines) {

            size = lines.size();
            cells = new boolean[size][size];

            for (int i = 0; i < lines.size(); i++) {
                for (int j = 0; j < lines.size(); j++) {
                    cells[i][j] = lines.get(i).charAt(j) == 'o';
                }
            }
        }

        public static List<Generation> getGenerations(String[] generationsFromOutput, int correctSize) {

            List<Generation> generations = new ArrayList<>();

            for (int i = 1; i < generationsFromOutput.length; i++) {
                String generation = generationsFromOutput[i].toLowerCase();

                Matcher matcher = pattern.matcher(generation);

                if (!matcher.find()) {
                    throw new WrongAnswer("Can't find number of Alive cells in the generation with number "
                            + (i + 1) + ".\nYour output should contain 'Alive: DDD', where D is a digit!");
                }

                int aliveFromOutput = Integer.parseInt(matcher.group(2));

                List<String> lines = Arrays.stream(generation.split("\n"))
                        .filter(line -> !line.contains("alive") && !line.contains("#") && !line.isEmpty())
                        .collect(Collectors.toList());

                if (lines.size() != correctSize) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " map size is wrong!\nYour size: " + lines.size() + "\n" +
                            "Expected size: " + correctSize);
                }

                int activeCellsInGeneration = (int) lines.stream().map(line -> line.split("")).flatMap(cells -> Arrays.stream(cells.clone())).filter(cell -> cell.equals("o")).count();

                if (activeCellsInGeneration != aliveFromOutput) {
                    throw new WrongAnswer("Active cells in the generation #" + (i + 1) + ": " + activeCellsInGeneration + "\n" +
                            "Your output: 'Alive: " + aliveFromOutput + "'");
                }

                for (String line : lines) {
                    if (line.length() != correctSize) {
                        throw new WrongAnswer("Generation map size is wrong!\nYour size: " + lines.size() + "\n" +
                                "Expected size: " + correctSize + "\nMake sure you don't print extra spaces at the end of the lines!");
                    }
                }

                generations.add(new Generation(lines));
            }

            return generations;
        }

        public boolean isCorrectNextGeneration(Generation generation) {

            if (generation.size != size) {
                return false;
            }

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {

                    int numberOfNeighbours = 0;

                    int up = i - 1 < 0 ? size - 1 : i - 1;
                    int down = i + 1 == size ? 0 : i + 1;
                    int right = j + 1 == size ? 0 : j + 1;
                    int left = j - 1 < 0 ? size - 1 : j - 1;

                    if (cells[up][left]) numberOfNeighbours++;
                    if (cells[up][j]) numberOfNeighbours++;
                    if (cells[up][right]) numberOfNeighbours++;
                    if (cells[i][left]) numberOfNeighbours++;
                    if (cells[i][right]) numberOfNeighbours++;
                    if (cells[down][left]) numberOfNeighbours++;
                    if (cells[down][j]) numberOfNeighbours++;
                    if (cells[down][right]) numberOfNeighbours++;

                    if ((numberOfNeighbours < 2 || numberOfNeighbours > 3) && generation.cells[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }


        public static void isCorrectGenerationsList(List<Generation> generations) {

            if (generations.size() <= 1) {
                return;
            }

            for (int i = 1; i < generations.size(); i++) {
                if (!generations.get(i - 1).isCorrectNextGeneration(generations.get(i))) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " is wrong!");
                }
            }
        }
    }
  learner_created: false
- name: src/life/GameOfLife.java
  visible: true
  text: |
    package life;

    import java.util.Random;
    import java.util.Scanner;

    public class GameOfLife {
        private Cell[][] universe;
        private Cell[][] generation;
        private Random random;
        private int size, seed, genNumber;

        public GameOfLife() {
        }

        public void start() {
            Scanner scanner = new Scanner(System.in);
            size = scanner.nextInt();
            seed = scanner.nextInt();
            genNumber = scanner.nextInt();
            random = new Random(seed);
            universe = new Cell[size][size];

            for (int i = 0; i < universe.length; i++) {
                for (int j = 0; j < universe.length; j++) {
                    universe[i][j] = new Cell(random.nextBoolean());
                }
            }
            findGeneration();
            showUniverse();
        }

        private void findGeneration() {
            int current = 0;
            while (current < genNumber) {
                generation = copy(universe);
                for (int i = 0; i < universe.length; i++) {
                    for (int j = 0; j < universe.length; j++) {
                        generation[i][j].determineState(getNeighbourCells(i, j));
                    }
                }
                universe = copy(generation);
                current++;
            }
        }

        private int getNeighbourCells(int r, int c) {
            int count = 0;
            for (int i = r - 1; i < r + 2; ++i) {
                for (int j = c - 1; j < c + 2; ++j) {
                    if (universe[adjustBounds(i)][adjustBounds(j)].getState().equals("O")) {
                        if (!(i == r && j == c)) {
                            count++;
                        }
                    }
                }
            }
            return count;
        }

        private int adjustBounds(int n) {
            int i;
            if (n > size - 1) i = 0;
            else if (n < 0) i = size - 1;
            else i = n;
            return i;
        }

        private void showUniverse() {
            for (Cell[] cells : universe) {
                for (int j = 0; j < universe.length; j++) {
                    System.out.print(cells[j].getState());
                }
                System.out.println();
            }
        }

        private Cell[][] copy(Cell[][] array) {
            Cell[][] copiedArray = new Cell[array.length][array.length];
            for (int i = 0; i < array.length; i++) {
                for (int j = 0; j < array.length; j++) {
                    copiedArray[i][j] = new Cell(array[i][j].isAlive());
                }
            }
            return copiedArray;
        }
    }
  learner_created: true
- name: src/life/Cell.java
  visible: true
  text: |
    package life;

    import java.util.Random;

    public class Cell {
        private boolean state;

        public Cell(boolean state){
            this.state = state;
        }

        public void setState(boolean state){
            this.state = state;
        }

        public String getState(){
            if (state){
                return "O";
            }
            return " ";
        }

        public boolean isAlive(){
            return state;
        }

        public void determineState(int neighborCells){
            if (this.isAlive()){
                if (neighborCells < 2 || neighborCells > 3){
                    this.state = false;
                }
            } else {
                if (neighborCells == 3){
                    this.state = true;
                }
            }
        }
    }
  learner_created: true
- name: src/life/Generation.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 23 May 2021 16:48:02 UTC
record: 3
