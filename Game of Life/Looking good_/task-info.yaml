type: edu
custom_name: Looking good!
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import life.GameOfLife;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class GameOfLifeTest extends SwingTest {

        public GameOfLifeTest() {
            super(new GameOfLife());
        }

        @SwingComponent(name = "GenerationLabel")
        JLabelFixture generationLabel;

        @SwingComponent(name = "AliveLabel")
        JLabelFixture aliveLabel;

        @DynamicTest(order = 1)
        CheckResult testWindow() {
            requireVisible(window);
            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testGenerationLabel() {
            requireEnabled(generationLabel);
            requireVisible(generationLabel);
            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testAliveLabel() {
            requireEnabled(aliveLabel);
            requireVisible(aliveLabel);
            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult testForInteger() {

            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(generationLabel.text());

            if (!matcher.find()) {
                return wrong("The 'GenerationLabel' doesn't contain an integer number!");
            }

            matcher = pattern.matcher(aliveLabel.text());

            if (!matcher.find()) {
                return wrong("The 'AliveLabel' doesn't contain an integer number!");
            }

            return correct();
        }
    }
  learner_created: false
- name: src/life/Generation.java
  visible: true
  text: "package life;\n\npublic class Generation{\n    private Cell[][] universe;\n\
    \    private Cell[][] nextGen;\n    private int size;\n\n    public Generation(int\
    \ size, Cell[][] universe){\n        this.size = size;\n        this.universe\
    \ = copy(universe);\n        \n    }\n\n    public void findNextGeneration(){\n\
    \        nextGen = copy(universe);\n        for (int i = 0; i < universe.length;\
    \ i++) {\n            for (int j = 0; j < universe.length; j++) {\n          \
    \      nextGen[i][j].determineState(getNeighbourCells(i, j));\n            }\n\
    \        }\n        universe = copy(nextGen);\n    }\n\n    private int getNeighbourCells(int\
    \ r, int c) {\n        int count = 0;\n        for (int i = r - 1; i < r + 2;\
    \ ++i) {\n            for (int j = c - 1; j < c + 2; ++j) {\n                if\
    \ (universe[adjustBounds(i)][adjustBounds(j)].getState().equals(\"O\")) {\n  \
    \                  if (!(i == r && j == c)) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n\n    private int adjustBounds(int n) {\n        int i;\n   \
    \     if (n > size - 1) i = 0;\n        else if (n < 0) i = size - 1;\n      \
    \  else i = n;\n        return i;\n    }\n\n    public Cell[][] copy(Cell[][]\
    \ array) {\n        Cell[][] copiedArray = new Cell[array.length][array.length];\n\
    \        for (int i = 0; i < array.length; i++) {\n            for (int j = 0;\
    \ j < array.length; j++) {\n                copiedArray[i][j] = new Cell(array[i][j].isAlive());\n\
    \            }\n        }\n        return copiedArray;\n    }\n\n    public Cell[][]\
    \ getNextGen(){\n        return nextGen;\n    }\n}\n"
  learner_created: true
- name: src/life/Cell.java
  visible: true
  text: |
    package life;

    import java.util.Random;

    public class Cell {
        private boolean state;

        public Cell(boolean state){
            this.state = state;
        }

        public void setState(boolean state){
            this.state = state;
        }

        public String getState(){
            if (state){
                return "O";
            }
            return " ";
        }

        public boolean isAlive(){
            return state;
        }

        public void determineState(int neighborCells){
            if (this.isAlive()){
                if (neighborCells < 2 || neighborCells > 3){
                    this.state = false;
                }
            } else {
                if (neighborCells == 3){
                    this.state = true;
                }
            }
        }
    }
  learner_created: true
- name: src/life/Game.java
  visible: true
  text: |
    package life;

    import java.io.IOException;
    import java.util.Random;
    import java.util.Scanner;

    public class GameOfLife {
        private Cell[][] universe;
        private Generation generation;
        private Random random;
        private int size;

        public GameOfLife() {
            Scanner scanner = new Scanner(System.in);
            size = scanner.nextInt();
            random = new Random();
            universe = new Cell[size][size];

            for (int i = 0; i < universe.length; i++) {
                for (int j = 0; j < universe.length; j++) {
                    universe[i][j] = new Cell(random.nextBoolean());
                }
            }
            generation = new Generation(size, universe);
        }

        public void start() {
            findGeneration();
        }

        private void findGeneration() {
            int gen = 1;
            while (gen < 14) {
                try {
                    generation.findNextGeneration();
                    universe = generation.copy(generation.getNextGen());
                    System.out.println("Generation #" + gen);
                    System.out.println("Alive: " + checkAliveCells());
                    showUniverse();
                    Thread.sleep(1000);
                    clear();
                    gen++;
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        private void showUniverse() {
            for (Cell[] cells : universe) {
                for (int j = 0; j < universe.length; j++) {
                    System.out.print(cells[j].getState());
                }
                System.out.println();
            }
        }

        private int checkAliveCells(){
            int count = 0;
            for (Cell[] cells : universe) {
                for (int j = 0; j < universe.length; j++) {
                    if (cells[j].isAlive()){
                        count++;
                    }
                }
            }
            return count;
        }

        private void clear(){
            try {
                if (System.getProperty("os.name").contains("Windows")) {
                    new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                }
                else
                    Runtime.getRuntime().exec("clear");
            }
            catch (IOException | InterruptedException e) {}
        }
    }
  learner_created: true
- name: src/life/GameOfLife.java
  visible: true
  learner_created: true
- name: src/life/GoLView.java
  visible: true
  learner_created: true
- name: src/life/CellView.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement#comment
status: Unchecked
record: -1
